generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////////////////////////// Tabela de Usuários /////////////////////////////////////////////

model User {
  id String @id @default(cuid())
  username String @unique @db.VarChar(50)
  password String
  email String @unique
  role Role @default(USER)
  characters Character[]
  campaigns_dm Campaign[] @relation("CampaignDm")
  campaigns_player PlayerOnCampaign[] @relation("PlayerCampaigns")

  @@index([username])
  @@index([email])
}

enum Role {
  USER
  ADMIN
}

///////////////////////////////////////////// Tabela de Jogadores nas Campanhas /////////////////////////////////////////////

model PlayerOnCampaign {
  campaign Campaign @relation("CampaignPlayers", fields: [campaignId], references: [id])
  campaignId String @map("campaign_id")
  player User @relation("PlayerCampaigns", fields: [playerId], references: [id])
  playerId String @map("player_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  @@unique([campaignId, playerId])
}

///////////////////////////////////////////// Tabela de Campanhas /////////////////////////////////////////////

model Campaign {
  id String @id @default(cuid())
  createdAt DateTime @default(now())  
  
  name String @db.VarChar(50)
  description String @db.VarChar(255)
  password String

  owner User @relation("CampaignDm", fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  players PlayerOnCampaign[] @relation("CampaignPlayers")

  characters Character[]

  // addedEquipment CustomEquipment[]
  customEquipment CampaignEquipment[]

  customFeat CampaignFeats[]

  customSkills Skill[]

  customRituals CampaignRitual[]

  customModifications CampaignModifications[]

  customOrigins CampaignOrigin[]

}


///////////////////////////////////////////// Tabela de Personagens /////////////////////////////////////////////

model Character {
  id String @id @default(cuid())
  name String @db.VarChar(50)

  level Int
  

  current_health Int
  current_sanity Int
  current_effort Int

  max_health Int
  max_sanity Int
  max_effort Int

  speed Int
  defense Int
  num_of_skills Int @default(0)
  
  healthInfo Json @map("health_info")
  effortInfo Json @map("effort_info")
  sanityInfo Json @map("sanity_info")

  atributes Json

  skills Json[]

  attacks Json[]

  owner User @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")
  
  campaign Campaign @relation(fields: [campaignId], references: [id])
  campaignId String @map("campaign_id")
  
  class Class @relation(fields: [classId], references: [id])
  classId String @map("class_id")
  
  subclass Subclass @relation(fields: [subclassId], references: [id])
  subclassId String @map("subclass_id")
  
  Inventory Inventory?

  feats CharacterFeat[]

  rituals CharacterRitual[]

  proficiencies Proficiency[]

  conditions CharacterCondition[]

  origin Origin? @relation(fields: [originId], references: [id])
  originId String @map("origin_id")
}

model CharacterFeat {
  character Character @relation(fields: [characterId], references: [id])
  characterId String @map("character_id")
  feat Feat @relation(fields: [featId], references: [id])
  featId String @map("feat_id")
  usingAfinity Boolean @default(false)

  @@unique([characterId, featId])
}


////////////////////////////////////////////// Tabela de Inventário /////////////////////////////////////////////

model Inventory {
  character Character @relation(fields: [characterId], references: [id])
  characterId String @id @map("character_id")

  currentValue Int
  maxValue Int
  alterations Json[]

  patent Patent
  slots InventorySlot[]
  credit Credit @default(LOW)
}

enum Patent {
  ROOKIE
  OPERATOR
  SPECIAL_AGENT
  OPERATION_OFFICER
  ELITE_AGENT
}

model InventorySlot {
  id String @id @default(cuid())
  inventory Inventory @relation(fields: [inventoryId], references: [characterId])
  inventoryId String @map("inventory_id")

  equipment Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int @map("equipment_id")

  uses Int @default(0)
  category Int
  local_name String
  local_description String
  is_equipped Boolean @default(false)

  alterations Json[]

}
///////////////////////////////////////////// Tabela de Condições /////////////////////////////////////////////
model Condition {
  id String @id @default(cuid())
  name String @db.VarChar(50)
  description String @db.Text
  is_custom Boolean
  character CharacterCondition[]
  ritual RitualCondition[]
}

model RitualCondition {
  ritual Ritual @relation(fields: [ritualId], references: [id])
  ritualId String @map("ritual_id")
  condition Condition @relation(fields: [conditionId], references: [id])
  conditionId String @map("condition_id")

  @@unique([ritualId, conditionId])
}
model CharacterCondition {
  character Character @relation(fields: [characterId], references: [id])
  characterId String @map("character_id")
  condition Condition @relation(fields: [conditionId], references: [id])
  conditionId String @map("condition_id")

  @@unique([characterId, conditionId])
}

///////////////////////////////////////////// Tabela de Classes /////////////////////////////////////////////
model Class {
  id String @id @default(cuid())
  name String @db.VarChar(50) 
  description String @db.Text

  hitPointsPerLevel Int
  SanityPointsPerLevel Int
  effortPointsPerLevel Int

  initialHealth Int
  initialSanity Int
  initialEffort Int

  number_of_skills Int @default(0)
  proficiencies Proficiency[]

  subclasses Subclass[]
  classFeats ClassFeats[]
  character Character[]
}

model Subclass {
  id String @id @default(cuid())
  name String @db.VarChar(50)
  description String @db.Text 

  classId String
  class Class @relation(fields: [classId], references: [id])
  subclassFeats SubclassFeats[]
  character Character[]
}

///////////////////////////////////////////// Tabela de Feats /////////////////////////////////////////////

model Feat {
  id String @id @default(cuid())
  name String @db.VarChar(50)
  description String @db.Text
  prerequisites String?
  characterUpgrades Json[]
  type        FeatType

  afinity String? @db.Text
  afinityUpgrades Json[]

  element Element


  classFeats ClassFeats[]
  subclassFeats SubclassFeats[]
  campaignFeats CampaignFeats[]

  generalFeats GeneralFeats[]

  character CharacterFeat[]
  origin Origin[]
  
}


model ClassFeats {
  feat Feat @relation(fields: [featId], references: [id])
  featId String
  class Class @relation(fields: [classId], references: [id])
  classId String
  isStarterFeat Boolean @default(false)

  @@unique([featId, classId])
}

model SubclassFeats {
  feat Feat @relation(fields: [featId], references: [id])
  featId String
  subclass Subclass @relation(fields: [subclassId], references: [id])
  subclassId String
  levelRequired Int

  @@unique([featId, subclassId])
}

model CampaignFeats {
  feat Feat @relation(fields: [featId], references: [id])
  featId String
  campaign Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
 

  @@unique([featId, campaignId])
}

model GeneralFeats {
  id String @id @default(cuid())
  feat Feat @relation(fields: [featId], references: [id])
  featId String
 

  @@unique([featId])
}

///////////////////////////////////////////// Tabela de Atributos /////////////////////////////////////////////

model Origin {
  id String @id @default(cuid())
  name String 
  description String
  is_custom Boolean
  feats Feat @relation(fields: [featId], references: [id])
  featId String  @map("feat_id")

  skills String[]
  character Character[]
  campaign CampaignOrigin[]
}

model CampaignOrigin {
  id String @id @default(cuid())
  campaign Campaign @relation(fields: [campaignId], references: [id])
  campaignId String @map("campaign_id")
  origin Origin @relation(fields: [originId], references: [id])
  originId String @map("origin_id")

  @@unique([campaignId, originId])
}
model Skill {
  name String @id
  atribute Atribute
  description String
  only_trained Boolean
  carry_peanalty Boolean
  needs_kit Boolean
  is_custom Boolean

  campaign Campaign? @relation(fields: [campaignId], references: [id])
  campaignId String? @map("campaign_id")
}


///////////////////////////////////////////// Tabela de Rituais /////////////////////////////////////////////

model Ritual {
  id String @id @default(cuid())
  name String 

  normalCastDescription String @db.Text
  normalCost Int

  discentCastDescription String? @db.Text
  discentCost Int?

  trueCastDescription String? @db.Text
  trueCost Int?

  ritualLevel Int
  exectutionTime String
  range Range
  target String
  duration String
  element Element
  resistence String

  is_custom Boolean
  damageRitual DamageRitual?
  conditions RitualCondition[]

  type RitualType
  character CharacterRitual[]
  campaign  CampaignRitual[]
  
}

model CharacterRitual {
  character Character @relation(fields: [characterId], references: [id])
  characterId String @map("character_id")
  ritual Ritual @relation(fields: [ritualId], references: [id])
  ritualId String @map("ritual_id")

  ritual_cost Int
  alterations Json[]
  @@unique([characterId, ritualId])
}

model DamageRitual {
  ritual Ritual @relation(fields: [ritualId], references: [id])
  ritualId String @id
  normalCastDamageType DamageType?
  discentCastDamageType DamageType?
  trueCastDamageType DamageType?

  normalCastDamage String?
  discentCastDamage String?
  trueCastDamage String?
}
enum RitualType {
  EFFECT
  DAMAGE
}

model CampaignRitual {
  id String @id @default(cuid())
  campaign Campaign @relation(fields: [campaignId], references: [id])
  campaignId String @map("campaign_id")
  ritual Ritual @relation(fields: [ritualId], references: [id])
  ritualId String @map("ritual_id")

  @@unique([campaignId, ritualId])
}
///////////////////////////////////////////// Tabela de Equipamentos e Modificações /////////////////////////////////////////////
model Modification {
  id String @id @default(cuid())
  name String 
  type ModificationType[]
  element Element
  characterUpgrades Json[]
  description String
  is_custom Boolean
  campaign CampaignModifications[]
}

model CampaignModifications {
  id String @id @default(cuid())
  campaign Campaign @relation(fields: [campaignId], references: [id])
  campaignId String @map("campaign_id")
  modification Modification @relation(fields: [modificationId], references: [id])
  modificationId String @map("modification_id")

  @@unique([campaignId, modificationId])
}

model Equipment {
  id Int @id @default(autoincrement())
  name String 

  num_of_uses Int
  description String
  weight Int
  category Int
  
  type ItemType
  is_custom Boolean
  
  characterUpgrades Json[]

  Weapon Weapon?
  CursedItem CursedItem?
  slots InventorySlot[]
  CampaignEquipment CampaignEquipment[]
}

model CampaignEquipment {
  id String @id @default(cuid())
  campaign Campaign @relation(fields: [campaignId], references: [id])
  campaignId String @map("campaign_id")
  equipment Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int @map("equipment_id")

  @@unique([campaignId, equipmentId])
}

model Weapon {
  Equipment Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int @id
  damage String
  critical_multiplier Int
  critical_range Int
  range Range
  damage_type DamageType
  weapon_category WeaponCategory 
  weapon_type WeaponType 
  hand_type HandType 
}


model CursedItem {
  Equipment Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int @id
  element Element
}



/////////////////////////////////////////////  Enums /////////////////////////////////////////////
enum ModificationType {
  MELEE_WEAPON
  BULLET_WEAPON
  BOLT_WEAPON
  ARMOR
  AMMO
  ACESSORY
}

enum Atribute {
  STRENGTH
  DEXTERITY
  VITALITY
  INTELLIGENCE
  PRESENCE
}

enum Credit {
  LOW
  MEDIUM
  HIGH
  UNLIMITED
}


enum HandType {
  LIGHT
  ONE_HANDED
  TWO_HANDED
}
enum WeaponType {
  MELEE
  BOLT
  BULLET
}

enum WeaponCategory {
  SIMPLE
  TATICAL
  HEAVY
}

enum Proficiency {
  SIMPLE
  TATICAL
  HEAVY
  LIGHT_ARMOR
  HEAVY_ARMOR
}
enum Element {
  REALITY
  FEAR
  BLOOD
  DEATH
  ENERGY
  KNOWLEDGE
}

enum ItemType {
  WEAPON
  ARMOR
  AMMO
  ACESSORY
  EXPLOSIVE
  OPERATIONAL_EQUIPMENT
  PARANORMAL_EQUIPMENT
  CURSED_ITEM
  DEFAULT

}

enum Range {
  SELF
  TOUCH
  MELEE
  SHORT
  MEDIUM
  EXTREME
  UNLIMITED
  LONG
}

enum DamageType {
  PIERCING
  BALISTIC
  IMPACT
  SLASHING
  FIRE
  CHEMICAL
  POISON
  BLOOD
  FEAR
  KNOWLEDGE
  DEATH
  ENERGY
  ELETRIC
}

enum FeatType {
  ORIGIN
  CUSTOM
  CLASS
  SUBCLASS
  GENERAL
}